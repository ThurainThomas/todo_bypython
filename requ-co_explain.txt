=>Hello Word of RabbitMq<=
 =>code<=
"""
pika  
 =>AMQP (Advanced Message Queuing Protocol) standard ကို Python မှာ implement လုပ်ထားတဲ့ library တစ်ခု ဖြစ်ပြီးတော့ 
  =>decouplingသည် A ကနေ Queue ကနေ Bကိုပို့ခြင်း
"""
""" 
###send.py###
 A.connection = pika.BlockingConnection(pika.ConnectionParameters("localhost")) 
    => RabbitMQ server ကို ချိတ်ဆက်ဖို့အတွက် IPသတ်မှတ်ပြီး တခြားအလုပ်တွေကို blocking ထားသည် 
 B.channel.queue_declare(queue="hello") 
  => message တွေ စီးဆင်းရာ နေရာက Queue ပါ။
 C.channel.basic_publish(exchange="", routing_key="hello", body="Hello Thurain!") 
  =>Exchange တွေက message တွေကို ဘယ် queue တွေဆီ ပို့မယ်ဆိုတာ ဆုံးဖြတ်ပေးပါတယ်။
"""

""" 
###receive.py###
 A, B from send.py and
 C.def callback(ch, method, properties, body) 
  => ရောက်လာတဲ့ message ရဲ့ အချက်အလက် (channel, method details, properties, body) တွေကို parameter အဖြစ် လက်ခံရရှိကာ သတ်မှတ်ထားတဲ့ အလုပ် (ဒီနေရာမှာတော့ message body ကို print ထုတ်တာ) ကို လုပ်ဆောင်ပေးတဲ့ function ဖြစ်ပါတယ်။
 D.channel.basic_consume(queue="hello", on_message_callback=callback, auto_ack=True) 
  => hello queue ကနေ Message တစ်စောင်စီ ရောက်လာတိုင်း callback function ကို အလိုအလျောက် ခေါ်ပေးပြီး (auto_ack=True)RabbitMQ က queue ထဲကနေ အလိုအလျောက် ဖယ်ရှားပေးပါလိမ့်မယ်။
 E.channel.start_consuming() 
  => RabbitMQ server ကနေ message တွေကို စတင်လက်ခံ (consume) ဖို့ consumer ကို စတင်လိုက်တာ ဖြစ်ပါတယ်။
"""

 =>requirement<=
"""
A. .venv
 =>python3.10 -m venv .venv
  =>source .venv/bin/activate
B. rabbitmq-server
 =>sudo apt install rabbitmq-server
  =>sudo systemctl status rabbitmq-server
"""

